package translation.tests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

import java.io.File;
//import java.util.ArrayList;
//import java.util.Collections;
//import java.util.List;

import org.junit.Test;

//import servicecomposition.compositionprocesses.ServiceComposition;
//import servicecomposition.entities.ConstraintAwarePlan;
//import servicecomposition.readers.FileReqConfigReader;
//import servicecomposition.readers.RequestConfiguration;
//import servicecomposition.readers.XMLFileReqConfigReader;
import translation.readers.csconfigreaders.CSConfiguration;
import translation.readers.csconfigreaders.FileCSConfigReader;
import translation.readers.csconfigreaders.XMLFileCSConfigReader;
import translation.translators.CompositeServiceTranslator;
import translation.translators.LucidCSTranslator;
import utilities.LogUtil;
import utilities.ReadWriteUtil;

/**
 * Class for testing correct generation of the Java segment of a composite service's Objective Lucid translation.
 * @author Jyotsana Gupta
 */
public class OLTransJavaSegGenTests 
{
	/**
	 * Tests the following requirements for a composite service with just 1 output:
	 * 1. Correct generation of output accumulator Java class.
	 */
	@Test
	public void singleCSOutput()
	{
		String actualLogFileName = "testinput/translationtests/oltransjavaseggentests/singlecsoutput/log.txt";
		LogUtil logger = new LogUtil();
		logger.setLogFileName(actualLogFileName);		
				
		FileCSConfigReader csConfigReader = new XMLFileCSConfigReader();
		csConfigReader.setConfigFileName("testinput/translationtests/oltransjavaseggentests/singlecsoutput/CS_Configuration.xml");
		CSConfiguration csConfig = csConfigReader.readCSConfig(logger);
		
		CompositeServiceTranslator csTranslator = new LucidCSTranslator();
		String actualLucidFileName = csTranslator.generateFormalLangCode(csConfig, logger);
		String expectedLucidFileName = "testinput/translationtests/oltransjavaseggentests/singlecsoutput/expectedlucidprogram.ipl";
		
		File actualLogFile = new File(actualLogFileName);
		boolean logGenerated = (!(actualLogFile.length() == 0));
		
		String expectedProgram = ReadWriteUtil.readTextFile(expectedLucidFileName);
		String actualProgram = ReadWriteUtil.readTextFile(actualLucidFileName);
		assertEquals(expectedProgram, actualProgram);
		assertFalse(logGenerated);
	}
	
	/**
	 * Tests the following requirements for a composite service with multiple outputs generated by 
	 * a single component service:
	 * 1. Correct generation of output accumulator Java class.
	 */
	@Test
	public void multiCSOutpOneSvc()
	{
		String actualLogFileName = "testinput/translationtests/oltransjavaseggentests/multicsoutponesvc/log.txt";
		LogUtil logger = new LogUtil();
		logger.setLogFileName(actualLogFileName);		
				
		FileCSConfigReader csConfigReader = new XMLFileCSConfigReader();
		csConfigReader.setConfigFileName("testinput/translationtests/oltransjavaseggentests/multicsoutponesvc/CS_Configuration.xml");
		CSConfiguration csConfig = csConfigReader.readCSConfig(logger);
		
		CompositeServiceTranslator csTranslator = new LucidCSTranslator();
		String actualLucidFileName = csTranslator.generateFormalLangCode(csConfig, logger);
		String expectedLucidFileName = "testinput/translationtests/oltransjavaseggentests/multicsoutponesvc/expectedlucidprogram.ipl";
		
		File actualLogFile = new File(actualLogFileName);
		boolean logGenerated = (!(actualLogFile.length() == 0));
		
		String expectedProgram = ReadWriteUtil.readTextFile(expectedLucidFileName);
		String actualProgram = ReadWriteUtil.readTextFile(actualLucidFileName);
		assertEquals(expectedProgram, actualProgram);
		assertFalse(logGenerated);
	}
	
	/**
	 * Tests the following requirements for a composite service with multiple outputs generated by 
	 * multiple component services belonging to the last layer of the composition plan:
	 * 1. Correct generation of output accumulator Java class.
	 */
	@Test
	public void multiCSOutpMultiSvcLastLayer()
	{
		String actualLogFileName = "testinput/translationtests/oltransjavaseggentests/multicsoutpmultisvclastlayer/log.txt";
		LogUtil logger = new LogUtil();
		logger.setLogFileName(actualLogFileName);		
				
		FileCSConfigReader csConfigReader = new XMLFileCSConfigReader();
		csConfigReader.setConfigFileName("testinput/translationtests/oltransjavaseggentests/multicsoutpmultisvclastlayer/CS_Configuration.xml");
		CSConfiguration csConfig = csConfigReader.readCSConfig(logger);
		
		CompositeServiceTranslator csTranslator = new LucidCSTranslator();
		String actualLucidFileName = csTranslator.generateFormalLangCode(csConfig, logger);
		String expectedLucidFileName = "testinput/translationtests/oltransjavaseggentests/multicsoutpmultisvclastlayer/expectedlucidprogram.ipl";
		
		File actualLogFile = new File(actualLogFileName);
		boolean logGenerated = (!(actualLogFile.length() == 0));
		
		String expectedProgram = ReadWriteUtil.readTextFile(expectedLucidFileName);
		String actualProgram = ReadWriteUtil.readTextFile(actualLucidFileName);
		assertEquals(expectedProgram, actualProgram);
		assertFalse(logGenerated);
	}
	
	/**
	 * Tests the following requirements for a composite service with multiple outputs generated by 
	 * multiple component services belonging to different layers of the composition plan:
	 * 1. Correct generation of output accumulator Java class.
	 */
	@Test
	public void multiCSOutpMultiLayer()
	{
		String actualLogFileName = "testinput/translationtests/oltransjavaseggentests/multicsoutpmultilayer/log.txt";
		LogUtil logger = new LogUtil();
		logger.setLogFileName(actualLogFileName);
				
		/*
		 * The commented part below was used during the first run of this test case 
		 * to ensure that the composite service used for translation can be created.
		 */
		/*
		//Creating composite service
		FileReqConfigReader configReader = new XMLFileReqConfigReader();
		configReader.setConfigFileName("testinput/translationtests/oltransjavaseggentests/multicsoutpmultilayer/Request_Configuration.xml");
		RequestConfiguration reqConfig = configReader.readReqConfig();
		
		List<String> actualPlanDetails = new ArrayList<String>();
		List<ConstraintAwarePlan> cnstrAwrPlans = ServiceComposition.driveServiceComposition(reqConfig, logger);
		for (ConstraintAwarePlan cnstrAwrPlan : cnstrAwrPlans)
		{
			actualPlanDetails.add(cnstrAwrPlan.toString());
		}
		Collections.sort(actualPlanDetails);
		
		List<String> expectedPlanDetails = new ArrayList<String>();
		expectedPlanDetails.add("Layer 0: {} [] W1 {W3}, {} [] W2 {W3}" 
								+ "\nLayer 1: {W1, W2} [] W3 {W4, W5}" 
								+ "\nLayer 2: {W3} [] W4 {W6}, {W3} [] W5 {W7}"
								+ "\nLayer 3: {W4} [] W6 {}, {W5} [] W7 {}");
				
		File actualLogFile = new File(actualLogFileName);
		boolean compLogGenerated = (!(actualLogFile.length() == 0));
		
		assertFalse(compLogGenerated);
		assertEquals(actualPlanDetails, expectedPlanDetails);
		*/
		
		//Translating created composite service into Lucid
		FileCSConfigReader csConfigReader = new XMLFileCSConfigReader();
		csConfigReader.setConfigFileName("testinput/translationtests/oltransjavaseggentests/multicsoutpmultilayer/CS_Configuration.xml");
		CSConfiguration csConfig = csConfigReader.readCSConfig(logger);
		
		CompositeServiceTranslator csTranslator = new LucidCSTranslator();
		String actualLucidFileName = csTranslator.generateFormalLangCode(csConfig, logger);
		String expectedLucidFileName = "testinput/translationtests/oltransjavaseggentests/multicsoutpmultilayer/expectedlucidprogram.ipl";
		
		File actualLogFile = new File(actualLogFileName);
		boolean transLogGenerated = (!(actualLogFile.length() == 0));
		
		String expectedProgram = ReadWriteUtil.readTextFile(expectedLucidFileName);
		String actualProgram = ReadWriteUtil.readTextFile(actualLucidFileName);
		assertEquals(expectedProgram, actualProgram);
		assertFalse(transLogGenerated);
	}
}