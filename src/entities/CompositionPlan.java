package entities;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * Class representing a service composition plan constructed from the plan set generated by the Backward Search algorithm.
 * @author Jyotsana Gupta
 */
public class CompositionPlan 
{
	private List<List<SearchNode>> serviceLayers;
	
	/**
	 * Parameterized constructor.
	 * It creates as many empty service layers for this composition plan as the layer count provided as input. 
	 * @param	layerCount	Number of service layers to be contained by this composition plan
	 */
	public CompositionPlan(int layerCount)
	{
		serviceLayers = new ArrayList<List<SearchNode>>();		
		for (int i = 0; i < layerCount; i++)
		{
			serviceLayers.add(new ArrayList<SearchNode>());
		}
	}
	
	/**
	 * Method for fetching all the service layers of this composition plan.
	 * Lists are not deep-copied here so as to allow removal of invalid search nodes from the service layers.
	 * @return	List of service layers of this composition plan
	 */
	public List<List<SearchNode>> getServiceLayers()
	{
		return serviceLayers;
	}
	
	/**
	 * Method for adding all the services in a plan set to this composition plan based on each search node's layer index.
	 * @param 	planSet		Plan set containing the search nodes (services) to be added
	 */
	public void addSearchNodes(Set<SearchNode> planSet)
	{
		int planLayerCount = serviceLayers.size();
		for (SearchNode searchNode : planSet)
		{
			int layerIndex = searchNode.getLayerIndex();
			if (planLayerCount > layerIndex)
			{
				serviceLayers.get(layerIndex).add(searchNode);
			}			
		}
	}
}